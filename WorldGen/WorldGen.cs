using System;
using System.Collections.Generic;
using System.Linq;

namespace WorldGen
{
    /**
     * <summary>
     * WorldGenerator class, handling the generation of an entire world from
     * start to finish.
     * 
     * This may be split up or otherwise changed radically in the future as the
     * generation process gets more complex.
     * </summary>
     */
    class WorldGenerator
    {
        /// <summary>
        /// This internal class represents a landmasss being generated by a
        /// LandmassExpander. It tracks how many land Hexes have been placed, how
        /// many Hexes we're trying to place, and the Coords of modified Hexes.
        /// </summary>
        private class Landmass
        {
            public int totalHexes;
            public int remainingHexes;
            public List<Coords> hexes = new List<Coords>();
            public List<Coords> shoreHexes = new List<Coords>();
        }

        private HexMap map;
        private List<Landmass> landmasses;

        // Ratio of land:water in this world. Currently a constant at 3:7,
        // but will be alterable by the user later.
        const double WORLD_RATIO = 0.30;

        // Maximum number of landmasses permitted in this world.
        const int MAX_LANDMASSES = 10;

        // Temperature thresholds, in arbitrary units. These define the
        // ranges for hex temperature determination; see SetTemperatures().
        private static readonly int TempThreshHot = 80;
        private static readonly int TempThreshWarm = 37;
        private static readonly int TempThreshCool = -37;
        private static readonly int TempThreshCold = -80;

        // Default arbitrary temperature units for the poles and equator.
        private static readonly int DefaultPoleTemp = -100;
        private static readonly int DefaultEquatorTemp = 100;

        // Arbitrary temperature unit adjustment per additional level of elevation.
        private static readonly int TempHeightAdjust = -5;

        /**
         * <summary>
         * WorldGenerator constructor requires a HexMap, which will hold the
         * world that is about to be generated.
         * 
         * Does some basic setup, like determining how many landmasses will
         * exist in the world and how many Hexes they should contain, but does
         * not perform any actual generation.
         * </summary>
         * <param name="map">HexMap to generate a world in.</param>
         */
        public WorldGenerator(HexMap map)
        {
            Random rnd = new Random();
            this.map = map;
            int worldTotal = (map.Width * map.Height);
            double overallTotalDec = (double)worldTotal;
            int totalLandHexes = (int)(overallTotalDec * WORLD_RATIO);
            int remainingHexes = totalLandHexes;

            landmasses = new List<Landmass>();
            int numLandmasses = rnd.Next(1, MAX_LANDMASSES);

            for (int i = 0; i < numLandmasses; i++)
            {
                Landmass landmass = new Landmass();
                int massHexes;
                if (i != numLandmasses - 1)
                {
                    massHexes = rnd.Next(1, remainingHexes / 2);
                }
                else
                {
                    massHexes = remainingHexes;
                }

                remainingHexes -= massHexes;
                landmass.totalHexes = landmass.remainingHexes = massHexes;
                landmasses.Add(landmass);
            }
        }

        /**
         * <summary>
         * Primary work method of this class, generating the entire world in
         * the given HexMap.
         * 
         * This will very likely be split into smaller methods in the near future.
         * </summary>
         */
        public void Generate()
        {
            Random rnd = new Random();
            for (int i = 0; i < landmasses.Count; i++)
            {
                Landmass mass = landmasses[i];
                List<Coords> allCoords = map.GetAllCoords();
                LandmassExpander lEx = new LandmassExpander(map);
                mass.hexes = lEx.Expand(allCoords, mass.totalHexes);
                mass.totalHexes = mass.hexes.Count;

                // Create shore/shallow water hexes adjacent to each hex of this landmass
                foreach (Coords owned in mass.hexes)
                {
                    if (map.BordersOcean(owned))
                    {
                        List<Coords> shoreHexes = map.GetAdjacentOceanHexes(owned);
                        foreach (Coords shoreCoords in shoreHexes)
                        {
                            map.SetTypeAt(shoreCoords, Hex.HexType.Shore);
                            mass.shoreHexes.Add(shoreCoords);
                        }
                    }
                }

                // Elevation
                int passes = rnd.Next(1, 5);
                List<Coords> eleHexes = new List<Coords>(mass.hexes);
                int range = eleHexes.Count;
                
                for (int pass = 1; pass <= passes; pass++)
                {
                    int toElevate = rnd.Next(range / 5, (int)(range * 0.75));
                    if (toElevate == 0) break;

                    List<Coords> elevatedOnThisPass = new List<Coords>(eleHexes);

                    int seedPoints = rnd.Next(1, 5);
                    for (int seedPoint = 0; seedPoint < seedPoints; seedPoint++)
                    {
                        if (toElevate <= 0) break;
                        int elevating = rnd.Next(1, toElevate);
                        HeightExpander hEx = new HeightExpander(map, pass);
                        List<Coords> tempHexes = hEx.Expand(eleHexes, elevating);
                        toElevate -= tempHexes.Count;
                        elevatedOnThisPass.AddRange(tempHexes);
                    }

                    range = elevatedOnThisPass.Count;
                    eleHexes = elevatedOnThisPass;
                }

                // Rivers
                passes = rnd.Next(1, 5);
                int totalRiverHexes = 50;
                for (int pass = 1; pass <= passes; pass++)
                {
                    RiverExpander rEx = new RiverExpander(map);
                    List<Coords> landAndShore = mass.hexes.Union(mass.shoreHexes).ToList();
                    List<Coords> riverHexes = rEx.Expand(landAndShore, totalRiverHexes);
                    totalRiverHexes -= riverHexes.Count;
                }

                // Temperature
                SetTemperatures();
            }
        }

        /**
         * <summary>
         * Sets temperatures for hexes in the nascent world.
         * Temperature is based on three things:
         *  - Latitude of the hex, with hexes closer to the equator (map
         *      center) being warmer, and hexes closer to the poles (top and
         *      bottom of the map) being cooler.
         *  - Adjustment value. Positive values will increase the overall
         *      temperature of the world, and negative values will decrease the
         *      overall temperature.
         *  - Altitude (ElevationLevel) of the hex, with higher elevations
         *      lowering the temperature of that hex.
         * </summary>
         * <param name="adjust">
         * Adjustment value, added to the arbitrary
         * temperature of the hex before it is fit into one of the temperature
         * level thresholds. Positive values will increase the temperature, and
         * negative values will lower it. At extremes (20 and above, or -20 and
         * below) some temperature levels will not exist in the world at all.
         * </param>
         */
        public void SetTemperatures(int adjust = 0)
        {
            // first locate the equator
            int equatorRow = map.Height / 2;

            // get gradient step
            int gradStep = (DefaultEquatorTemp - DefaultPoleTemp) / (equatorRow);
            bool stepFlipped = false;

            //
            for (int y = 0, currTemp = DefaultPoleTemp; y < map.Height; y++)
            {
                // flip the temperature gradient after we hit the equator
                if (!stepFlipped
                    && (y >= equatorRow))
                {
                    gradStep *= -1;
                    stepFlipped = true;
                }

                // set temperature of all hexes according to thresholds
                for (int x = 0; x < map.Width; x++)
                {
                    Coords here = new Coords(x, y);
                    Hex.ElevationLevel el = map.GetElevationAt(here);
                    int heightAdjust = (int)el * TempHeightAdjust;
                    int hexTemp = currTemp + adjust + heightAdjust;

                    if (hexTemp > TempThreshHot)
                        map.SetTemperatureAt(new Coords(x, y), Hex.TemperatureLevel.Hot);
                    else if (hexTemp > TempThreshWarm)
                        map.SetTemperatureAt(new Coords(x, y), Hex.TemperatureLevel.Warm);
                    else if (hexTemp < TempThreshCold)
                        map.SetTemperatureAt(new Coords(x, y), Hex.TemperatureLevel.Cold);
                    else if (hexTemp < TempThreshCool)
                        map.SetTemperatureAt(new Coords(x, y), Hex.TemperatureLevel.Cool);
                    else
                        map.SetTemperatureAt(new Coords(x, y), Hex.TemperatureLevel.Temperate);
                }

                currTemp += gradStep;
            }
        }
    }
}
