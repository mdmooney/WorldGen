using System;
using System.Text;

namespace WorldGen
{
    /* <summary>
     * A simple generator for in-world names.
     * Can currently only generate nonsense names, that favourite staple of the fantasy genre.
     * Will eventually be expanded to allow more robust place names, like "Mount Foo".
     * </summary>
     */ 
    class NameGenerator
    {
        // These define the vowels and consonants that may be found in any syllable of a nonsense
        // word generated by this class, as well as consonants that can only be found at the end
        // or beginning of a syllable.
        // They are arrays of strings because they're just meant to represent sounds of consonants
        // and vowels, not necessarily just letters; for example, both "o" and "ou" are acceptable
        // as vowels in a generated word.

        // These are currently readonly statics, but they will be alterable in later iterations
        // to allow different "flavours" of nonsense language (harsher, more sibilant, etc.).
        private static readonly string[] nonsenseVowels =
        {
            "a", "e", "i", "o", "u", "y",
            //"ae", "ai", "au", "ee", "ei",
            //"ie", "oo"
        };
        private static readonly string[] nonsenseConsonants =
        {
            "b", "d", "f", "g", "h",
            "k", "l", "m", "n", "p",
            "r", "s", "t", "v",
            "x", "y", "z", "'",
            "ch", "gh", "ph", "sh", "th"
        };
        private static readonly string[] nonsenseStartConsonants =
        {
            "c", "j", "qu", "w", "wh"
        };
        private static readonly string[] nonsenseEndConsonants =
        {
            "ff", "ll"
        };

        // as above, these will be variable later
        private static readonly int maxReadOnlyConsonants = 3;
        private static readonly double startConsonantChance = 0.8;
        private static readonly double endConsonantChance = 0.5;

        private Random rand;

        public NameGenerator()
        {
            rand = new Random();
        }

        /* <summary>
         * Generates a nonsensical name by choosing a number of syllables (currently hardcoded
         * in the range of 1-3, but subject to change) and generating them. Each syllable has
         * at least a vowel, and may have a start or end consonant, depending on the probabilities
         * set in this instance.
         * </summary>
         * <returns>A nonsense name.</returns>
         */
        public string GenerateNonsenseName()
        {
            if (nonsenseVowels == null)
            {
                // we can't generate anything without vowels, just return default name
                return "foo";
            }

            // arbitrary capacity, long enough for a 6-syllable string with 6 chars each
            StringBuilder builder = new StringBuilder(36);

            // decide how many syllables to generate
            int numSyllables = rand.Next(maxReadOnlyConsonants) + 1;

            // Get consonant totals
            int numStartConsonants = 0;
            int numEndConsonants = 0;
            if (nonsenseConsonants != null)
            {
                numStartConsonants = nonsenseConsonants.Length;
                numEndConsonants = nonsenseConsonants.Length;
            }
            numStartConsonants += nonsenseStartConsonants != null ? nonsenseStartConsonants.Length : 0;
            numEndConsonants += nonsenseEndConsonants != null ? nonsenseEndConsonants.Length : 0;

            // Create syllables
            for (int i = 0; i < numSyllables; i++)
            {
                // start consonant
                if ((numStartConsonants > 0) 
                    && (rand.NextDouble() <= startConsonantChance))
                {
                    builder.Append(PickConsonant(numStartConsonants, nonsenseStartConsonants));
                }

                // vowel
                string vowel = nonsenseVowels[rand.Next(nonsenseVowels.Length)];
                builder.Append(vowel);

                // end consonant
                if ((numEndConsonants > 0)
                    && (rand.NextDouble() <= endConsonantChance))
                {
                    builder.Append(PickConsonant(numEndConsonants, nonsenseEndConsonants));
                }
            }

            return builder.ToString();
        }

        /* <summary>
         * Pick a consonant string at random from either the general pool of consonants, or,
         * optionally, a supplemental pool of consonants (intended for starting or ending
         * consonant lists).
         * </summary>
         * <param name="totalNum">The total number of consonants in both pools.</param>
         * <param name="supplement">The supplementary consonant array, e.g. the ending consonants.</param>
         * <returns> The randomly chosen consonant.</returns>
         */
        private string PickConsonant(int totalNum, string[] supplement)
        {
            string cons;

            int consIndex = rand.Next(totalNum);
            if (nonsenseConsonants != null)
            {
                if (supplement != null)
                {
                    cons = (consIndex >= nonsenseConsonants.Length) ?
                        supplement[consIndex - nonsenseConsonants.Length] :
                        nonsenseConsonants[consIndex];
                }
                else
                {
                    // only shared consonants in this case
                    cons = nonsenseConsonants[consIndex];
                }
            }
            else
            {
                // we only have specific supplemental consonants in this case
                cons = supplement[consIndex];
            }
            return cons;
        }

    }
}
